##//== Dockerfile Sample ==
#
###//=========================
##//==>[ubuntu-24.04、ubuntu-22.04、ubuntu-18.04、latest]
#--ARG BASE_VER=ubuntu-18.04
#--ARG BASE_PRE=crops/poky
###//-----
##//==>[ubuntu-24.04-base、ubuntu-22.04-base、ubuntu-18.04-base、ubuntu-16.04-base]
#--ARG BASE_VER=ubuntu-18.04-base
#--ARG BASE_PRE=crops/yocto
###//==========
##//[!][Default]
##//[!][映像基底&版本](!=切換=!)
##//[!](DBSET 對應 BASE_VER)(因為 FROM 上面的變數會清除)
##//==>[24.04、22.04、18.04、16.04]
ARG BASE_VER=22.04
ARG BASE_PRE=ubuntu
###//==========
FROM $BASE_PRE:$BASE_VER

##//[24.04] noble [22.04] jammy [18.04] bionic [16.04] xenial
ARG DBSET=jammy

##//LABEL description="Env for Yocto & Android Compile"
##//LABEL maintainer="sw <sw@gmail.com>"

ENV IDSET=sw
ENV IDNUM=1000
ENV IDTZD=Asia/Taipei
##ENV LANG=en_US.UTF-8
##//(除錯輔助)
ENV IDMSG=0
ENV IDNON=0

###//=========================
##//[!]實體主機相依
#--ARG HOST_CTL="NO"
##//[!=>]套件來源列表
#--ARG DB_CTL="NO"
##//[!=>]編譯套件[YOCTO]
#--ARG YOCTO_CTL="NO"
##//[!=>]編譯套件[ANDROID]
#--ARG ANDRO_CTL="NO"
##//[!=>]安裝套件[Repo](特定版本)
#--ARG REPO_CTL="NO"
##//[!=>]編譯環境[Python](特定版本)
#--ARG PY_CTL="NO"
##//[===>]安裝套件[Anaconda]
#--ARG CONDA_CTL="YES"
##//[==>]編譯套件[CROSS]
#ARG CROSS_CTL="NO"
##//[===>]編譯套件(特定版本)
ARG OVER_CTL="NO"

###//=========================
##//[!]導入引用(crops/poky)
#--ARG CROPS_CTL="NO"
##//[是] => [FROM ubuntu]
##//[否] => [FROM crops/yocto]
##//[否] => [FROM crops/poky]
##//[==>]帳號設定
#--ARG USER_CTL="NO"

###//=========================
##//[!]環境設定(量身訂做)
#--ARG ENV_CTL="NO"
##//[==>]環境設定(輔助)
ARG LOC_CTL="YES"

ARG DEBIAN_FRONTEND=noninteractive
USER root
##
## docker system df
## docker builder prune -af
## docker buildx prune -af
## docker system prune -af
## docker volume prune -af
## docker image prune -af
## docker container prune -af
##
## -u 當執行時使用到未定義過的變數，則顯示錯誤資訊
## -e 若指令傳回值不等於 0，則立即退出 shell
## -x 執行指令前，會先顯示該指令及所下的選項
##ADD https://raw.githubusercontent.com/lijenchen/Docker/refs/heads/main/dockersetup_brain.sh /usr/bin/
##COPY dockersetup_brain.sh /usr/bin/
RUN set -xe; \
    ##//------------------------------------------------------------------------
    ##//sed -i "$d"                         /usr/bin/entry.py; ##//刪除最後一行
    ##//sed -i "$d;$d"                      /usr/bin/entry.py; ##//刪除最後兩行
    ##//sed -i "nd"                         /usr/bin/entry.py; ##//刪除指定行號(第 n 行)
    ##//sed -i -e "nd" -e "md"              /usr/bin/entry.py; ##//刪除指定行號(第 n 行和第 m 行)
    ##//sed -i "n,m!d"                      /usr/bin/entry.py; ##//刪除非指定行號(除了 n 到 m 行)
    ##//sed -i "n,md"                       /usr/bin/entry.py; ##//刪除指定行號(從 n 到 m 行)
    ##//sed -i "/[n-m]/d"                   /usr/bin/entry.py; ##//刪除指定行號(從 n 到 m 行)
    ##//sed -i "n,$d"                       /usr/bin/entry.py; ##//刪除指定行號(從 n 到最後一行)
    ##//sed -i "/match_keyword/d"           /usr/bin/entry.py; ##//刪除匹配行號
    ##//sed -i "/match_keyword/,+nd"        /usr/bin/entry.py; ##//刪除匹配行號和後面 n 行
    ##//sed -i "/match_keyword/{N;N;d}"     /usr/bin/entry.py; ##//刪除匹配行號和下兩行
    ##//sed -i "/match1\|match2/d"          /usr/bin/entry.py; ##//刪除匹配行號(多重比對)
    ##//sed -i "n,m{/match_keyword/d;}"     /usr/bin/entry.py; ##//在指定範圍中刪除匹配行號(從 n 到 m 行)
    ##//sed -i "/^#/d"                      /usr/bin/entry.py; ##//刪除匹配行號(以 # 開頭)
    ##//sed -i "/^R/d"                      /usr/bin/entry.py; ##//刪除匹配行號(以 R 開頭)
    ##//sed -i "/^[RF]/d"                   /usr/bin/entry.py; ##//刪除匹配行號(以 R 或 F 開頭)
    ##//sed -i "/^[A-Z]/d"                  /usr/bin/entry.py; ##//刪除匹配行號(從 A 到 Z 開頭)(大寫)
    ##//sed -i "/^[A-Za-z]/d"               /usr/bin/entry.py; ##//刪除匹配行號(從 A 到 Z 開頭)(大小寫)
    ##//sed -i "/m$/d"                      /usr/bin/entry.py; ##//刪除匹配行號(以 m 結尾)
    ##//sed -i "/[mx]$/d"                   /usr/bin/entry.py; ##//刪除匹配行號(以 m 或 x 結尾)
    ##//sed -i "/./!d"                      /usr/bin/entry.py; ##//刪除匹配行號(空白行)(無資料行)
    ##//sed -i "/^$/d"                      /usr/bin/entry.py; ##//刪除匹配行號(空白行)(無資料行)
    ##//sed -i "/^[[:space:]]*$/d"          /usr/bin/entry.py; ##//刪除匹配行號(空白行和空格行)
    ##//sed -i "/if os.getcwd()/{x;p;x;G}"  /usr/bin/entry.py; ##//前後插入空行
    ##//sed -i "/if os.getcwd()/{x;p;x;}"   /usr/bin/entry.py; ##//前面插入空行
    ##//sed -i "/if os.getcwd()/G"          /usr/bin/entry.py; ##//後面插入空行
    ##//------------------------------------------------------------------------
    ##//實體主機相依
    HOST_CTL=${HOST_CTL:-YES} && if [ "$HOST_CTL" = "YES" ]; then \
        ##//[基本套件]
        rm -rf /etc/apt/sources.list.d/*.list; rm -rf /var/lib/apt/lists/*; \
        apt-get clean && apt-get update --fix-missing; \
        apt-get install -y --no-install-recommends \
            apt-transport-https apt-utils \
            software-properties-common \
            openssh-server \
            lsb-release \
            sudo \
            gnupg \
            tzdata \
            tofrodos \
            vim nano \
            zip unzip \
            curl wget \
            net-tools \
            ; \
        ##//套件資料庫
        DB_CTL=${DB_CTL:-YES} && if [ "$DB_CTL" = "YES" ]; then \
            ##//[官][自由軟體]main[非]restricted[私][自由軟體]universe[非]multiverse
            ##//(main)Free software, officially supported by Canonical
            ##//(universe) Free software, NOT supported by Canonical
            ##//(restricted) Non-free software officially supported by Canonical
            ##//(multiverse) Non-free software NOT supported by Canonical
            ##
            ##//套件安裝來源(新增)取消屏蔽(deb-src)(sed 無法使用變數代換!?)
            ##//[X]sed -i 's/^# deb-src http:\/\/archive.ubuntu.com\/ubuntu\/ $DBSET main /deb-src http:\/\/archive.ubuntu.com\/ubuntu\/ $DBSET main /g' /etc/apt/sources.list; \
            ##//[O]sed -i 's/^# deb-src http:\/\/archive.ubuntu.com\/ubuntu\/ jammy main /deb-src http:\/\/archive.ubuntu.com\/ubuntu\/ jammy main /g' /etc/apt/sources.list; \
            ##sed -i 's/^# deb-src/deb-src/g' /etc/apt/sources.list; \
            sed -i '0,/^# deb-src/s//deb-src/' /etc/apt/sources.list; \
            ##
            ##//套件安裝來源(新增)
            ##//echo "deb http://tw.archive.ubuntu.com/ubuntu $DBSET main restricted" | sudo tee -a /etc/apt/sources.list.d/$DBSET.list; \
            ##//echo "deb http://tw.archive.ubuntu.com/ubuntu $DBSET main restricted" | sudo tee -a /etc/apt/sources.list; \
            echo "deb http://tw.archive.ubuntu.com/ubuntu $DBSET main restricted universe multiverse" >> /etc/apt/sources.list; \
            echo "deb-src http://tw.archive.ubuntu.com/ubuntu $DBSET main restricted universe multiverse" >> /etc/apt/sources.list; \
            ##//if [ `"cat /etc/issue | awk '{print $2}' | cut -d '.' -f1"` != "18" ]; then \
            ##//if [ `"cat /etc/issue | awk '{print $2}' | cut -c 1-2"` != "18" ]; then \
            if [ "$DBSET" = "jammy" ] || [ "$DBSET" = "noble" ]; then \
                if [ "$DBSET" = "noble" ]; then \
                target="jammy"; \
                echo "deb     [arch=amd64] http://tw.archive.ubuntu.com/ubuntu ${target} main restricted universe multiverse" >> /etc/apt/sources.list; \
                echo "deb-src [arch=amd64] http://tw.archive.ubuntu.com/ubuntu ${target} main restricted universe multiverse" >> /etc/apt/sources.list; \
                echo "deb     [arch=amd64] http://archive.ubuntu.com/ubuntu ${target} main restricted universe multiverse" >> /etc/apt/sources.list; \
                echo "deb-src [arch=amd64] http://archive.ubuntu.com/ubuntu ${target} main restricted universe multiverse" >> /etc/apt/sources.list; \
                fi; \
                target="focal"; \
                echo "deb     [arch=amd64] http://tw.archive.ubuntu.com/ubuntu ${target} main restricted universe multiverse" >> /etc/apt/sources.list; \
                echo "deb-src [arch=amd64] http://tw.archive.ubuntu.com/ubuntu ${target} main restricted universe multiverse" >> /etc/apt/sources.list; \
                echo "deb     [arch=amd64] http://archive.ubuntu.com/ubuntu ${target} main restricted universe multiverse" >> /etc/apt/sources.list; \
                echo "deb-src [arch=amd64] http://archive.ubuntu.com/ubuntu ${target} main restricted universe multiverse" >> /etc/apt/sources.list; \
                target="bionic"; \
                echo "deb     [arch=amd64] http://tw.archive.ubuntu.com/ubuntu ${target} main restricted universe multiverse" >> /etc/apt/sources.list; \
                echo "deb-src [arch=amd64] http://tw.archive.ubuntu.com/ubuntu ${target} main restricted universe multiverse" >> /etc/apt/sources.list; \
                echo "deb     [arch=amd64] http://archive.ubuntu.com/ubuntu ${target} main restricted universe multiverse" >> /etc/apt/sources.list; \
                echo "deb-src [arch=amd64] http://archive.ubuntu.com/ubuntu ${target} main restricted universe multiverse" >> /etc/apt/sources.list; \
                ##
                ##//套件安裝來源(pubkey)
                ##//keyserver.ubuntu.com
                ##//pgp.mit.edu
                ##//keys.openpgp.org
                ##//keyoxide.org
                ##
                ##//(method1)
                ##//gpg --keyserver <KS> --recv-key <PUBKEY>; gpg -a --export <PUBKEY> | gpg --dearmor -o /etc/apt/keyrings/sw.gpg;
                ##//(method2)
                ##//apt-key adv --keyserver <KS> --recv-keys <PUBKEY>; apt-key export <KEY> | apt-key add -;
                ##//(method3)
                ##//apt-key adv --keyserver hkp://<KS>:80 --recv-keys <PUBKEY>
                ##//[更新]
                ##//apt-key adv --refresh-keys --keyserver <KS>
                ##//apt-key list
                ##
                target="3B4FE6ACC0B21F32"; verget="C0B21F32"; \
                ttkey1="hkp://keyserver.ubuntu.com:80"; \
                ttkey2="hkp://pgp.mit.edu:80"; \
                gpg --keyserver ${ttkey1} --recv-key ${target} || gpg --keyserver ${ttkey2} --recv-key ${target}; gpg -a --export ${verget} | gpg --dearmor -o /etc/apt/trusted.gpg.d/sw.gpg; \
                ##//curl -fsSL https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x790bc7277767219c42c86f933b4fe6acc0b21f32 | gpg --dearmor -o /etc/apt/trusted.gpg.d/sw.gpg; \
                ##//gpg --delete-key ${verget}; \
                ##
                ##( \
                ##//獲取(publickey)
                ##apt-key adv --keyserver ${ttkey1} --recv-keys ${target} || apt-key adv --keyserver ${ttkey2} --recv-keys ${target}; \
                ##//導入(publickey)
                ##apt-key export ${verget} | apt-key add -;
                ##//apt-key del ${verget}; \
                ##); \
                ##rm -f /etc/apt/*.gpg; \
                ##
                ##//apt-get remove docker-engine docker.io docker-ce docker;
                ##//apt-get purge docker-engine docker.io docker-ce docker;
                ##//apt-get autoremove --purge docker-engine docker.io docker-ce docker;
                ##//rm -rf /var/lib/docker;
                ##
                ##//curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
                ##//echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" >> /etc/apt/sources.list.d/docker.list
                ##//apt-get install -y docker-ce docker-ce-cli containerd.io
            fi; \
            rm -rf /etc/apt/sources.list.d/*.list; rm -rf /var/lib/apt/lists/*; \
            apt-get clean && apt-get update --fix-missing; \
            ##
            ##//套件安裝來源(啟用)
            add-apt-repository universe -y; \
            add-apt-repository restricted -y; \
            add-apt-repository multiverse -y; \
            apt-get clean && apt-get update --fix-missing; \
        fi; \
        ##//------------------------------------------------
        ##//[編譯套件] Yocto [FROM crops/yocto]
        YOCTO_CTL=${YOCTO_CTL:-YES} && if [ "$YOCTO_CTL" = "YES" ]; then \
            apt-get install -y \
                build-essential \
                chrpath \
                cpio \
                diffstat \
                fluxbox \
                gawk \
                iproute2 \
                iputils-ping \
                locales \
                screen \
                socat \
                sysstat \
                texinfo \
                tightvncserver \
                tmux \
                xz-utils \
                zstd \
                git-core \
                git-lfs \
                subversion \
                \
                python3-dev \
                python3-pip \
                python3-virtualenv \
                ; \
            if [ "$DBSET" = "noble" ]; then \
                apt-get install -y \
                    python3-git \
                    python3-jinja2 \
                    python3-pexpect \
                    pylint \
                    xterm \
                    file \
                    lz4 \
                    ; \
            fi; \
            if [ "$DBSET" = "jammy" ]; then \
                apt-get install -y \
                    python3-git \
                    python3-jinja2 \
                    python3-pexpect \
                    pylint \
                    xterm \
                    file \
                    lz4 \
                    ; \
                apt-get install -y \
                    libegl1-mesa libegl1-mesa-dev \
                    libsdl1.2-dev \
                    ; \
            fi; \
            if [ "$DBSET" = "bionic" ]; then \
                apt-get install -y \
                    python \
                    python-virtualenv \
                    liblz4-tool \
                    ; \
            fi; \
            if [ "$DBSET" = "xenial" ]; then \
                apt-get install -y \
                    python \
                    python-virtualenv \
                    liblz4-tool \
                    ; \
            fi; \
        fi; \
        ##//[編譯套件] Android
        ##//==[Android]https://source.android.com/docs/setup/start/requirements
        ANDRO_CTL=${ANDRO_CTL:-YES} && if [ "$ANDRO_CTL" = "YES" ]; then \
            ##//[編譯套件](建議)(AOSP > 9.0)
            apt-get install -y \
                bison \
                flex \
                fontconfig \
                x11proto-core-dev \
                xsltproc \
                zlib1g-dev \
                libgl1-mesa-dev \
                libx11-dev \
                libxml2-utils \
                libc6-dev-i386 \
                lib32z1-dev \
                ; \
            \
            if [ "$DBSET" = "noble" ]; then \
                ##//target="libtinfo5_6.3-2_amd64.deb"; \
                ##//wget http://archive.ubuntu.com/ubuntu/pool/universe/n/ncurses/${target}; \
                ##//dpkg -i ${target}; rm -f ${target}; \
                ##//target="libtinfo6_6.3-2_amd64.deb"; \
                ##//wget http://archive.ubuntu.com/ubuntu/pool/main/n/ncurses/${target}; \
                ##//dpkg -i ${target}; rm -f ${target}; \
                ##//target="libncurses-dev_6.3-2_amd64.deb"; \
                ##//wget http://archive.ubuntu.com/ubuntu/pool/main/n/ncurses/${target}; \
                ##//dpkg -i ${target}; rm -f ${target}; \
                ##//\
                ##//apt-get install -y libncurses5 libncurses5-dev libncursesw5 libncursesw5-dev; \
                ##//apt-get install -y lib32ncurses5 lib32ncurses5-dev; \
                apt-get install -y lib32ncurses-dev libncurses-dev libglib2.0-dev; \
            fi; \
            if [ "$DBSET" = "jammy" ]; then \
                apt-get install -y libncurses5 libncurses5-dev libncursesw5 libncursesw5-dev; \
                apt-get install -y lib32ncurses5; \
                apt-get install -y lib32ncurses-dev libncurses-dev libglib2.0-dev; \
            fi; \
            if [ "$DBSET" = "bionic" ]; then \
                apt-get install -y libncurses5 libncurses5-dev libncursesw5 libncursesw5-dev; \
                apt-get install -y lib32ncurses5 lib32ncurses5-dev; \
                apt-get install -y libncurses-dev libglib2.0-dev; \
            fi; \
            \
            ##//[編譯套件](構建)"gn"
            wget -O /usr/local/bin/gn http://storage.googleapis.com/chromium-gn/3fd43e5e0dcc674f0a0c004ec290d04bb2e1c60e; \
            chmod +x /usr/local/bin/gn; ln -s /usr/local/bin/gn /usr/bin/gn; \
        fi; \
        ##//[相關套件](Repo)(相容性)
        ##//https://gerrit.googlesource.com/git-repo
        ##//https://github.com/GerritCodeReview/git-repo
        REPO_CTL=${REPO_CTL:-YES} && if [ "$REPO_CTL" = "YES" ]; then \
            ##//指定「repo」版本 (2.32 版本無視 Phtyon 限制)
            ##//https://github.com/GerritCodeReview/git-repo/blob/v2.32/repo => [raw]
            target="v2.32"; curl https://raw.githubusercontent.com/GerritCodeReview/git-repo/${target}/repo > /usr/local/bin/repo; \
            chmod a+x /usr/local/bin/repo; \
        else \
            ##wget -O /usr/local/bin/repo https://storage.googleapis.com/git-repo-downloads/repo; \
            ##curl -o /usr/local/bin/repo https://storage.googleapis.com/git-repo-downloads/repo; \
            curl -O https://storage.googleapis.com/git-repo-downloads/repo > /usr/local/bin/repo; \
            chmod a+x /usr/local/bin/repo; \
        fi; \
        ##//[編譯套件](Python)(相容性)
        PY_CTL=${PY_CTL:-YES} && if [ "$PY_CTL" = "YES" ]; then \
            ##//安裝套件(Anaconda)
            ##https://docs.anaconda.com/free/anaconda/install/linux/
            ##https://repo.anaconda.com/archive/
            CONDA_CTL=${CONDA_CTL:-NO} && if [ "$CONDA_CTL" = "YES" ]; then \
                apt-get install -y \
                    libasound2 \
                    libgl1-mesa-glx \
                    libxcomposite1 \
                    libxcursor1 \
                    libxi6 \
                    libxrandr2 \
                    libxss1 \
                    libxtst6 \
                    ; \
                CONDA_PATH=conda; \
                verget="2024.10-1"; \
                ##wget -O ~/anaconda.sh --quiet https://repo.anaconda.com/archive/Anaconda3-${verget}-Linux-x86_64.sh; \
                curl -O https://repo.anaconda.com/archive/Anaconda3-${verget}-Linux-x86_64.sh > ~/anaconda.sh; \
                /bin/bash ~/anaconda.sh -b -p /opt/$CONDA_PATH; rm ~/anaconda.sh; \
                ##
                ##//指定安裝路徑 (所有人皆可使用)
                if [ -f "/opt/$CONDA_PATH/etc/profile.d/conda.sh" ]; then \
                    ##//設定使用環境 (所有人皆可使用)
                    echo ". /opt/$CONDA_PATH/etc/profile.d/conda.sh" >> /etc/bash.bashrc; \
                    echo "conda activate base" >> /etc/bash.bashrc; \
                    ##echo ". /opt/$CONDA_PATH/etc/profile.d/conda.sh" >> ~/.bashrc; \
                    ##echo "conda activate base" >> ~/.bashrc; \
                    ##ln -s /opt/$CONDA_PATH/etc/profile.d/conda.sh /etc/profile.d/conda.sh; \
                    ##
                    ##//將以下設定放置在 ~/bashrc
                    ##//# >>> conda initialize >>>
                    ##//# !! Contents within this block are managed by 'conda init' !!
                    ##//__conda_setup="$('/opt/anaconda3/bin/conda' 'shell.bash' 'hook' 2>/dev/null)"
                    ##//if [ $? -eq 0 ]; then
                    ##//    eval "$__conda_setup"
                    ##//else
                    ##//    if [ -f "/opt/anaconda3/etc/profile.d/conda.sh" ]; then
                    ##//        . "/opt/anaconda3/etc/profile.d/conda.sh"
                    ##//    else
                    ##//        export PATH="/opt/anaconda3/bin:$PATH"
                    ##//    fi
                    ##//fi
                    ##//unset __conda_setup
                    ##//# <<< conda initialize <<<
                    ##//
                    ##//rm -rf ~/.condarc ~/.conda ~/.continuum
                fi; \
            else \
                ##//安裝套件(特定版本)
                if [ "$DBSET" != "bionic" ]; then \
                    ##apt-get autoremove --purge -y `dpkg -l | awk '{ print $2 }' | grep ^python*`; \
                    ##//!移除內建 python 會影響"UI"登入環境!
                    ##//##verget="3.12"; \
                    ##//##apt-get purge --auto-remove -y python${verget}; apt-get purge -y python${verget}; apt-get purge -y python3-pip; apt-get purge -y python3; \
                    ##
                    ##//安裝 python3 [特定版本](相容性)
                    add-apt-repository ppa:deadsnakes/ppa -y; \
                    apt-get clean && apt-get update --fix-missing; \
                    apt-cache policy python3.9; \
                    apt-get install -y python3.9-dev python3.9-distutils; \
                    cd /usr/bin; ln -sf python3.9 python3; ln -sf python3.9-config python3-config; ln -sf pydoc3.9 pydoc3; \
                    ##
                    cd /usr/lib/python3/dist-packages; \
                    lv=`find -iname apt_pkg.cpython-*-x86_64-linux-gnu.so` && echo "$lv" "apt_pkg.so" | xargs ln -sf; \
                    ##//ln -sf apt_pkg.cpython-310-x86_64-linux-gnu.so apt_pkg.so; \
                    ##
                    ##//安裝 python2 [到期版本](相容性)
                    ##//apt-get install -y checkinstall libbz2-dev libffi-dev libgdbm-dev libsqlite3-dev tk-dev; \
                    ##
                    ##//wget https://www.python.org/ftp/python/2.7.18/Python-2.7.18.tgz; tar -xvf Python-2.7.18.tgz; cd Python-2.7.18; \
                    ##//./configure --enable-optimizations --prefix=/usr; make; make install; \
                    ##//ln -sfn "/usr/local/bin/python2.7" '/usr/bin/python2'
                    ##//sh -c 'echo \"/usr/local/Python2.7/lib\" > /etc/ld.so.conf'; /sbin/ldconfig -v; \
                    ##
                    apt-get install -y python2-dev; \
                    ##
                    ##curl -o get-pip.py https://bootstrap.pypa.io/pip/2.7/get-pip.py; python2 get-pip.py; \
                    ##
                    ##//切換版本(python)
                    ##//update-alternatives --install <link> <name> <path> <priority>
                    ##//update-alternatives --remove         <name> <path>
                    ##//if [ -f "/usr/bin/python3" ]; then update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.12 120  --slave /usr/bin/pydoc3 pydoc3 /usr/bin/pydoc3.12  --slave /usr/bin/pygettext3 pygettext3 /usr/bin/pygettext3.12  --slave /usr/bin/python3-config python3-config /usr/bin/python3.12-config; fi; \
                    ##//if [ -f "/usr/bin/python3" ]; then update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9   90  --slave /usr/bin/pydoc3 pydoc3 /usr/bin/pydoc3.9   --slave /usr/bin/pygettext3 pygettext3 /usr/bin/pygettext3.9   --slave /usr/bin/python3-config python3-config /usr/bin/python3.9-config; fi; \
                    ##//if [ -f "/usr/bin/python2" ]; then update-alternatives --install /usr/bin/python2 python2 /usr/bin/python2.7   70  --slave /usr/bin/pydoc2 pydoc2 /usr/bin/pydoc2.7   --slave /usr/bin/pygettext2 pygettext2 /usr/bin/pygettext2.7   --slave /usr/bin/python2-config python2-config /usr/bin/python2.7-config; fi; \
                    ##//update-alternatives --query python; update-alternatives --config python; \
                fi; \
                cd /usr/bin; if [ -e python2 ]; then ln -sf python2 python; fi; \
            fi; \
        fi; \
        ##//------------------------------------------------
        ##//[編譯套件](cross)
        CROSS_CTL=${CROSS_CTL:-YES} && if [ "$CROSS_CTL" = "YES" ]; then \
            ##//arch [-vendor] [-os] [-(gnu)eabi]
            ##//arch   : 晶片架構，如 ARM
            ##//vendor : 工具鏈的提供場商
            ##//os     : 支持的作業系統
            ##//eabi   : 嵌入式應用二進制介面 (Embedded Application Binary Interface)
            ##//
            ##//(e.g.) arm-none-linux-eabi-gcc (支持作業系統)   (ARM9、ARM11、Cortex-A)
            ##//(e.g.) arm-none-eabi-gcc       (不支持作業系統) (ARM7、Cortex-M、Cortex-R) (同 armcc)
            ##//不支持 FPU (soft)
            ##//支持 FPU
            ##//arm-linux-gnueabi-gcc (softfp)
            ##//arm-linux-gnueabihf-gcc (hard)
            ##//------------------------
            ##//(對應版本)
            #//if [ "$DBSET" = "jammy" ]; then \
            #//    apt-get install -y g++-11-multilib; apt-get install -y g++-11-aarch64-linux-gnu; \
            #//elif [ "$DBSET" = "bionic" ]; then \
            #//    apt-get install -y g++-7-multilib; apt-get install -y g++-7-aarch64-linux-gnu; \
            #//    target="cpp-aarch64-linux-gnu_7.3.0-3ubuntu2_amd64.deb"; \
            #//elif [ "$DBSET" = "xenial" ]; then \
            #//    apt-get install -y g++-5-multilib; apt-get install -y g++-5-aarch64-linux-gnu; \
            #//else \
                apt-get install -y g++-multilib; apt-get install -y g++-aarch64-linux-gnu; \
                ##//[編譯套件](arm)(v6)(32)
                ##//g++-multilib-arm-linux-gnueabihf
                ##//g++-multilib-arm-linux-gnueabi
            #//fi; \
            apt-get install -y clang; \
            ##//------------------------
            ##//[編譯套件](附加)
            apt-get install -y \
                dpkg-cross \
                bc \
                m4 \
                ccache \
                libswitch-perl \
                libreadline-dev \
                libssl-dev \
                openssl \
                rpm2cpio \
                rsync \
                ; \
            if [ "$DBSET" = "noble" ]; then apt-get install -y libmagic1t64; fi; \
            if [ "$DBSET" = "jammy" ]; then apt-get install -y libmagic1; fi; \
            if [ "$DBSET" = "bionic" ]; then apt-get install -y libmagic1; fi; \
            ##//------------------------
            ##//[編譯套件](kernel)
            apt-get install -y kmod fakeroot; \
            apt-get build-dep -y linux; \
            ##//------------------------
            ##//(特定版本)
            OVER_CTL=${OVER_CTL:-NO} && if [ "$OVER_CTL" = "YES" ]; then \
                ##//(特定版本)(qcom-proprietary)(congenial 16.04 => 18.04)
                if [ "$DBSET" = "bionic" ]; then \
                    apt install -y openjdk-8-jdk-headless libxml-opml-simplegen-perl tree; \
                    apt install -y libnewlib-dev; \
                    ln -s /usr/include/newlib/sys/_sigset.h /usr/include/x86_64-linux-gnu/bits/sigset.h; \
                    ln -s /usr/include/locale.h /usr/include/xlocale.h; \
                fi; \
                if [ "$DBSET" = "xenial" ]; then \
                    apt install -y openjdk-8-jdk-headless libxml-opml-simplegen-perl tree; \
                fi; \
                ##
                ##//套件安裝來源(新增)(PPA 個人套件庫)(Personal Package Archives)(ppa:使用者名稱/PPA名稱)
                ##//add-apt-repository --remove ppa:nginx/stable
                ##//add-apt-repository ppa:nginx/stable
                ##//add-apt-repository ppa:ubuntu-toolchain-r/ppa -y; \
                ##//apt-get clean && apt-get update --fix-missing; \
                ##
                ##//lvn=12; if [ -f /usr/bin/g++-$lvn* ]; then apt-get purge -y g++-$lvn; fi; \
                ##//lvn=12; if [ -f /usr/bin/gcc-$lvn* ]; then apt-get purge -y gcc-$lvn; fi; \
                ##
                lvn=11; \
                if [ -f /usr/bin/g++-$lvn* ]; then update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-$lvn $((lvn*10))  --slave /usr/bin/gcc gcc /usr/bin/gcc-$lvn  --slave /usr/bin/gcov gcov /usr/bin/gcov-$lvn  --slave /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-$lvn  --slave /usr/bin/gcc-nm gcc-nm /usr/bin/gcc-nm-$lvn --slave /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-$lvn --slave /usr/bin/gcov-dump gcov-dump /usr/bin/gcov-dump-$lvn --slave /usr/bin/gcov-tool gcov-tool /usr/bin/gcov-tool-$lvn; fi; \
                if [ -f /usr/bin/gcc-$lvn* ]; then update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-$lvn $((lvn*10))                                              --slave /usr/bin/gcov gcov /usr/bin/gcov-$lvn  --slave /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-$lvn  --slave /usr/bin/gcc-nm gcc-nm /usr/bin/gcc-nm-$lvn --slave /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-$lvn --slave /usr/bin/gcov-dump gcov-dump /usr/bin/gcov-dump-$lvn --slave /usr/bin/gcov-tool gcov-tool /usr/bin/gcov-tool-$lvn; fi; \
                lvn=7; \
                if [ -f /usr/bin/g++-$lvn* ]; then update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-$lvn $((lvn*10))  --slave /usr/bin/gcc gcc /usr/bin/gcc-$lvn  --slave /usr/bin/gcov gcov /usr/bin/gcov-$lvn  --slave /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-$lvn  --slave /usr/bin/gcc-nm gcc-nm /usr/bin/gcc-nm-$lvn --slave /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-$lvn --slave /usr/bin/gcov-dump gcov-dump /usr/bin/gcov-dump-$lvn --slave /usr/bin/gcov-tool gcov-tool /usr/bin/gcov-tool-$lvn; fi; \
                if [ -f /usr/bin/gcc-$lvn* ]; then update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-$lvn $((lvn*10))                                              --slave /usr/bin/gcov gcov /usr/bin/gcov-$lvn  --slave /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-$lvn  --slave /usr/bin/gcc-nm gcc-nm /usr/bin/gcc-nm-$lvn --slave /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-$lvn --slave /usr/bin/gcov-dump gcov-dump /usr/bin/gcov-dump-$lvn --slave /usr/bin/gcov-tool gcov-tool /usr/bin/gcov-tool-$lvn; fi; \
                ##//update-alternatives --query gcc; update-alternatives --config gcc; \
            fi; \
        fi; \
    fi; \
    ##//------------------------------------------------------------------------
    ##//導入引用(crops/poky)
    CROPS_CTL=${CROPS_CTL:-YES} && if [ "$CROPS_CTL" = "YES" ]; then \
        ##//------------------------------------------------
        ##//==[crops]https://github.com/crops
        ##//==[crops/yocto]https://github.com/crops/yocto-dockerfiles
        ##//(!進入起點!)
        ##//buildall.sh => build_container.sh => 使用對應的 Dockerfile 建立映像 => 替換 Dockerfile 並再次建立映像
        ##//------------------------------------------------
        ##//==[crops/yocto](build_container.sh)
        ##//  [!->] build-install-dumb-init.sh
        ##//  [x->] install-buildtools.sh
        ##//  [x->] install-buildtools-make.sh
        ##//----------------------------
        ##//==[crops/yocto](install-buildtools.sh)
        ##if [ "$DBSET" = "bionic" ]; then \
        ##    verget="4.1"
        ##    target="x86_64-buildtools-extended-nativesdk-standalone-${verget}.sh"; \
        ##    wget https://downloads.yoctoproject.org/releases/yocto/yocto-${verget}/buildtools/${target}; \
        ##    sha256="d360ac01016c848f713d6dd7848f25d0a5319e96e2dd279ab37ffcbd7320dbbe"; \
        ##    echo "${sha256} ${target}" > SHA256SUMS; sha256sum -c SHA256SUMS || exit 1; rm SHA256SUMS; \
        ##    /bin/bash ${target} -y; rm ${target}; \
        ##fi; \
        ##//==[crops/yocto](install-buildtools-make.sh)
        ##if [ "$DBSET" = "bionic" ]; then \
        ##    verget="4.1"
        ##    target="x86_64-buildtools-make-nativesdk-standalone-${verget}.sh"; \
        ##    wget https://downloads.yoctoproject.org/releases/yocto/yocto-${verget}/buildtools/${target}; \
        ##    sha256="d9cc8a4f76392e23f9b2854af78d460e99bb5e4cbb82de6ccca0f6be7506f652"; \
        ##    echo "${sha256} ${target}" > SHA256SUMS; sha256sum -c SHA256SUMS || exit 1; rm SHA256SUMS; \
        ##    /bin/bash ${target} -y; rm ${target}; \
        ##fi; \
        ##//------------------------------------------------
        ##//==[crops/yocto]https://github.com/crops/yocto-dockerfiles/blob/master/dockerfiles/ubuntu/ubuntu-X/ubuntu-X-base/Dockerfile
        ##if [ -d /etc/skel/ ]; then \
        ##    cp -af /etc/skel/ /etc/vncskel/ && echo "export DISPLAY=1" >> /etc/vncskel/.bashrc; \
        ##    mkdir /etc/vncskel/.vnc && echo "" | vncpasswd -f > /etc/vncskel/.vnc/passwd; chmod 0600 /etc/vncskel/.vnc/passwd; \
        ##fi; \
        ##//------------------------------------------------
        ##//流程管控(進程管理)(dumb-init)
        if [ ! -f "/usr/bin/dumb-init" ]; then \
            ##//--------------------------------------------
            ##//==[crops/yocto]https://github.com/crops/yocto-dockerfiles/blob/master/build-install-dumb-init.sh
            ##//--------------------------------------------
            #//builddir=`mktemp -d` && cd $builddir; \
            #//##虛擬環境
            #//##pip3 install virtualenv; \
            #//virtualenv $builddir/venv; . $builddir/venv/bin/activate; \
            #//pip3 install setuptools tox; \
            #//##
            #//target="v1.2.5.tar.gz"; wget --no-check-certificate https://github.com/Yelp/dumb-init/archive/${target}; \
            #//sha256="3eda470d8a4a89123f4516d26877a727c0945006c8830b7e3bad717a5f6efc4e"; \
            #//echo "${sha256} ${target}" > SHA256SUMS; sha256sum -c SHA256SUMS || exit 1; rm SHA256SUMS; \
            #//tar xf ${target}; \
            #//cd dumb-init*; \
            #//echo py >> requirements-dev.txt; \
            #//sed -i '128 i \ \ \ \ packages=[],' setup.py; \
            #//sed -i -e 's/envlist = .*/envlist = py3/' tox.ini; \
            #//sed -i -e 's/tox -e pre-commit//' Makefile; \
            #//make dumb-init; \
            #//#make test; \
            #//cp dumb-init /usr/bin/dumb-init; \
            #//chmod +x /usr/bin/dumb-init; \
            #//cd / && rm $builddir -rf; \
            ##//------------------------
            verget="1.2.5"; wget --no-check-certificate https://github.com/Yelp/dumb-init/releases/download/v${verget}/dumb-init_${verget}_amd64.deb; \
            dpkg -i dumb-init_*.deb; rm -f dumb-init_${verget}_amd64.deb; \
            ##//------------------------
            #//verget="1.2.5"; wget -O /usr/bin/dumb-init https://github.com/Yelp/dumb-init/releases/download/v${verget}/dumb-init_${verget}_x86_64; \
            #//chmod +x /usr/bin/dumb-init; \
            ##//------------------------
            ##//apt-get install -y dumb-init; \
            ##//------------------------
        fi; \
        \
        ##//帳號設定(登入對應)(權限、名稱)(全新設定 vs 內容修改)
        USER_CTL=${USER_CTL:-YES} && if [ "$USER_CTL" = "YES" ]; then \
            ##//--------------------------------------------
            ##//==[crops/poky]https://github.com/crops/poky-container/blob/master/Dockerfile
            ##//==[crops/poky](dockerfile)[s](引用上述文件)
            ##//------------------------------------------
            ##//ENTRYPOINT & CMD
            ##//[=>]進入點 => 同時存在時以 ENTRYPOINT 為主，CMD 成為 ENTRYPOINT 的參數
            ##//[=>]呼叫時 => ENTRYPOINT 不可被覆寫 而 CMD 可以
            ##//------------------------------------------
            ##//[??]繼承 crops/poky 映像時，新映像如果不指定 ENTRYPOINT，會沿用 crops/poky 映像的 ENTRYPOINT
            ##//[??]繼承 crops/poky 映像時，新映像繼承了所有 crops/poky 建立時 Dockerfile 的行為，所以原先的 ENTRYPOINT 會被執行
            ##//(啟動流程)
            ##//[=>]ENTRYPOINT ["/usr/bin/distro-entry.sh", "/usr/bin/dumb-init", "--", "/usr/bin/poky-entry.py"]
            ##//[=>]ENTRYPOINT ["/usr/bin/dumb-entry.sh",   "/usr/bin/dumb-init", "--", "/usr/bin/poky-entry.py"]
            ##//(!進入起點!)
            ##//dumb-entry.sh => poky-entry.py
            ##//poky-entry.py => poky_usersetup.py --username=$IDSET --workdir={wd} {idargs} poky_launch.sh {wd}
            ##//poky_usersetup.py => sudo poky_useradd.sh & sudo poky_groupadd.sh & "sudo -E -H -u"
            ##//poky_useradd.sh => useradd -N -g $gid -m $skelarg -o -u $uid "$username" [帳號建立]
            ##//poky_launch.sh => exec "$@" [帳號登入(shell)]
            ##//------------------------------------------
            ##//(!進入起點!)[初始環境](備用方案)
            ##//==[crops/poky](distro-entry.sh)(=Modify=)(dumb-start.sh)
            lvn="dumb-start.sh"; lvp="/usr/bin/"; lvt="${lvp}${lvn}"; \
            if [ -f "${lvt}" ]; then rm -f ${lvt}; fi; \
            touch ${lvt}; \
            if [ -f "${lvt}" ]; then \
                echo "#!/bin/bash" >> ${lvt}; \
                echo >> ${lvt}; \
                echo "cmd1=\"/usr/bin/dumb-entry.sh\"" >> ${lvt}; \
                echo "cmd2=\"/usr/bin/dumb-init\"" >> ${lvt}; \
                echo "cmd3=\"--\"" >> ${lvt}; \
                echo "cmd4=\"/usr/bin/poky-entry.py\"" >> ${lvt}; \
                echo "cmd5=\"\${1:-bash}\"" >> ${lvt}; \
                echo 'if [ $IDNON == "0" ]; then sh -c "$cmd1 $cmd2 $cmd3 $cmd4 $cmd5"; else sh -c "$cmd5"; fi;' >> ${lvt}; \
            fi; \
            ##//--------------------------------------------
            ##//(!進入起點!)[=帳號登入=](權限=>USER)
            ##//==[crops/poky](poky-launch.sh)(=Modify=!!)(poky_launch.sh)
            lvn="poky_launch.sh"; lvp="/usr/bin/"; lvt="${lvp}${lvn}"; \
            if [ -f "${lvt}" ]; then rm -f ${lvt}; fi; \
            touch ${lvt}; if [ -f "${lvt}" ]; then \
                echo '#!/bin/bash' >> ${lvt}; \
                echo >> ${lvt}; \
                echo 'workdir=$1; shift; cd $workdir;' >> ${lvt}; \
                echo >> ${lvt}; \
                echo '##登入提示' >> ${lvt}; \
                echo 'echo "=========="' >> ${lvt}; \
                echo 'echo '"'"'$@        => '"'"'$@' >> ${lvt}; \
                echo 'echo '"'"'$workdir  => '"'"'$workdir' >> ${lvt}; \
                echo "echo '\$HOME     => '\$HOME" >> ${lvt}; \
                echo "echo '\$USER     => '\$USER" >> ${lvt}; \
                echo "echo '\$uid \$gid => '\$(id -u) \$(id -g)" >> ${lvt}; \
                echo "echo \"==========\"" >> ${lvt}; \
                ##//echo "OSKV=\`uname -r | sed 's/-generic//g'\`" >> ${lvt}; \
                ##//echo "OSRV=\`cat /etc/lsb-release | grep DISTRIB_RELEASE | sed 's/DISTRIB_RELEASE=//g'\`" >> ${lvt}; \
                ##//echo 'echo "[$OSRV] ($OSKV)"' >> ${lvt}; \
                ##//echo "date" >> ${lvt}; \
                echo >> ${lvt}; \
                echo '##環境設定(輔助)(特定)(專用)' >> ${lvt}; \
                echo 'if [ -f "/usr/bin/dockerpoky.sh" ]; then source "/usr/bin/dockerpoky.sh"; fi;' >> ${lvt}; \
                echo >> ${lvt}; \
                echo 'if [ $# -gt 0 ]; then' >> ${lvt}; \
                echo '    exec "$@"' >> ${lvt}; \
                echo 'else' >> ${lvt}; \
                echo '    exec bash -i' >> ${lvt}; \
                echo 'fi' >> ${lvt}; \
            fi; \
            ##//--------------------------------------------
            ##//(!進入起點!)[初始環境](權限=>ROOT)
            ##//==[crops/poky](distro-entry.sh)(=Modify=)(dumb-entry.sh)
            lvn="dumb-entry.sh"; lvp="/usr/bin/"; lvt="${lvp}${lvn}"; \
            if [ -f "${lvt}" ]; then rm -f ${lvt}; fi; \
            touch ${lvt}; if [ -f "${lvt}" ]; then \
                echo '#!/bin/bash' >> ${lvt}; \
                echo >> ${lvt}; \
                echo '##環境設定(輔助)(特定)(通用)' >> ${lvt}; \
                echo 'if [ -f "/usr/bin/dockerdumb.sh" ]; then source "/usr/bin/dockerdumb.sh"; fi;' >> ${lvt}; \
                echo >> ${lvt}; \
                echo 'if [ $IDMSG != "0" ]; then echo $@; fi' >> ${lvt}; \
                echo 'if [ $IDNON == "0" ]; then' >> ${lvt}; \
                echo '    exec "$@"' >> ${lvt}; \
                echo 'else' >> ${lvt}; \
                echo '    sh -c "${4:-bash}"' >> ${lvt}; \
                echo 'fi' >> ${lvt}; \
            fi; \
            ##//--------------------------------------------
            ##//(!進入起點!)[初始環境][帳號設定](動態處理)(權限=>ROOT)
            ##//==[crops/poky](poky-entry.py)(=Modify=!!)
            lvn="poky-entry.py"; lvp="/usr/bin/"; lvt="${lvp}${lvn}"; \
            if [ -f "${lvt}" ]; then rm -f ${lvt}; fi; \
            touch ${lvt}; if [ -f "${lvt}" ]; then \
                echo '#!/usr/bin/env python3' >> ${lvt}; \
                echo '# -*- coding:utf-8 -*-' >> ${lvt}; \
                echo '# coding=utf-8' >> ${lvt}; \
                echo >> ${lvt}; \
                echo 'import argparse' >> ${lvt}; \
                echo 'import grp' >> ${lvt}; \
                echo 'import os' >> ${lvt}; \
                echo 'import pwd' >> ${lvt}; \
                echo 'import subprocess' >> ${lvt}; \
                echo 'import sys' >> ${lvt}; \
                echo >> ${lvt}; \
                echo "def sanity_default():" >> ${lvt}; \
                echo '    uid = 1000' >> ${lvt}; \
                echo '    gid = 1000' >> ${lvt}; \
                echo '    return uid, gid' >> ${lvt}; \
                echo >> ${lvt}; \
                echo 'parser = argparse.ArgumentParser()' >> ${lvt}; \
                echo "parser.add_argument('--workdir'," >> ${lvt}; \
                echo "                    default='/home/sw'," >> ${lvt}; \
                echo "                    help='The active directory once the container is running.'" >> ${lvt}; \
                echo "                         'In the abscence of the \"id\" argument, the uid and gid'" >> ${lvt}; \
                echo "                         'of the workdir will also be used for the user in the container.')" >> ${lvt}; \
                echo >> ${lvt}; \
                echo "parser.add_argument('--id'," >> ${lvt}; \
                echo "                    nargs='?'," >> ${lvt}; \
                echo "                    help='uid and gid to use for the user inside the container.'" >> ${lvt}; \
                echo "                         'It should be in the form uid:gid')" >> ${lvt}; \
                echo >> ${lvt}; \
                echo "parser.add_argument('cmd'," >> ${lvt}; \
                echo "                    nargs=argparse.REMAINDER," >> ${lvt}; \
                echo "                    help='command to run after setting up container,'" >> ${lvt}; \
                echo "                         'often used for testing.')" >> ${lvt}; \
                echo >> ${lvt}; \
                echo 'args = parser.parse_args()' >> ${lvt}; \
                echo 'args.workdir = os.getcwd()' >> ${lvt}; \
                echo 'cpath = "/home/"' >> ${lvt}; \
                echo 'cname = os.getenv("IDSET")' >> ${lvt}; \
                echo >> ${lvt}; \
                echo 'if type(cname) != "str":' >> ${lvt}; \
                echo '    cname = str(cname)' >> ${lvt}; \
                echo >> ${lvt}; \
                echo 'if len(os.getenv("IDSET")) != 0:' >> ${lvt}; \
                echo '    cpath = cpath + cname' >> ${lvt}; \
                echo 'else:' >> ${lvt}; \
                echo '    cpath = cpath + "sw"' >> ${lvt}; \
                echo >> ${lvt}; \
                echo 'uid = ""' >> ${lvt}; \
                echo 'gid = ""' >> ${lvt}; \
                echo 'if args.id:' >> ${lvt}; \
                echo '    uid, gid = args.id.split(":")' >> ${lvt}; \
                echo '    if os.getenv("IDMSG") == str(1):' >> ${lvt}; \
                echo '        print("id select 0")' >> ${lvt}; \
                echo '##優先權(1) [-w] (對應目錄)' >> ${lvt}; \
                echo 'elif args.workdir != "/home" and os.path.exists(args.workdir):' >> ${lvt}; \
                echo '    uid = os.stat(os.getcwd()).st_uid' >> ${lvt}; \
                echo '    gid = os.stat(os.getcwd()).st_gid' >> ${lvt}; \
                echo '    if os.getenv("IDMSG") == str(1):' >> ${lvt}; \
                echo '        print("id select 1")' >> ${lvt}; \
                echo '##優先權(2) [-e] (對應名稱)' >> ${lvt}; \
                echo 'elif os.path.exists(cpath):' >> ${lvt}; \
                echo '    uid = os.stat(cpath).st_uid' >> ${lvt}; \
                echo '    gid = os.stat(cpath).st_gid' >> ${lvt}; \
                echo '    if os.getenv("IDMSG") == str(1):' >> ${lvt}; \
                echo '        print("id select 2")' >> ${lvt}; \
                echo '##優先權(3) 預設' >> ${lvt}; \
                echo 'else:' >> ${lvt}; \
                echo '    uid, gid = sanity_default()' >> ${lvt}; \
                echo '    if os.getenv("IDMSG") == str(1):' >> ${lvt}; \
                echo '        print("id select 3")' >> ${lvt}; \
                echo >> ${lvt}; \
                echo 'if uid == 0 or gid == 0:' >> ${lvt}; \
                echo '    if cname != "root":' >> ${lvt}; \
                echo '        uid, gid = sanity_default()' >> ${lvt}; \
                echo '    if os.getenv("IDMSG") == str(1):' >> ${lvt}; \
                echo '        print("change uid|gid")' >> ${lvt}; \
                echo >> ${lvt}; \
                echo 'idargs = "--uid={} --gid={}".format(uid, gid)' >> ${lvt}; \
                echo >> ${lvt}; \
                echo '##環境資訊' >> ${lvt}; \
                echo 'if os.getenv("IDMSG") == str(1):' >> ${lvt}; \
                echo '    print("==========[poky-entry.py]")' >> ${lvt}; \
                echo '    print("argsid  ",args.id)' >> ${lvt}; \
                echo '    print("argcmd  ",args.cmd)' >> ${lvt}; \
                echo '    print("workdir ",args.workdir)' >> ${lvt}; \
                echo '    print("getcwd  ",os.getcwd())' >> ${lvt}; \
                echo '    print("st_uid  ",os.stat(os.getcwd()).st_uid)' >> ${lvt}; \
                echo '    print("st_gid  ",os.stat(os.getcwd()).st_gid)' >> ${lvt}; \
                echo '    print()' >> ${lvt}; \
                echo '    print("cname   ",cname)' >> ${lvt}; \
                echo '    print("cpath   ",cpath)' >> ${lvt}; \
                echo '    if os.path.exists(cpath):' >> ${lvt}; \
                echo '        print("st_uid  ",os.stat(cpath).st_uid)' >> ${lvt}; \
                echo '        print("st_gid  ",os.stat(cpath).st_gid)' >> ${lvt}; \
                echo '    print("----------")' >> ${lvt}; \
                echo '    print("uid     ",uid)' >> ${lvt}; \
                echo '    print("gid     ",gid)' >> ${lvt}; \
                echo '    print("idargs  ",idargs)' >> ${lvt}; \
                echo '    print()' >> ${lvt}; \
                echo >> ${lvt}; \
                SETENVDIRECT="1"; \
                if [ "$SETENVDIRECT" = "1" ]; then \
                echo 'try:' >> ${lvt}; \
                echo "    ##檢查是否存在(gid)" >> ${lvt}; \
                echo '    grp.getgrgid(gid)' >> ${lvt}; \
                echo 'except KeyError:' >> ${lvt}; \
                echo "    ##不存在時配置" >> ${lvt}; \
                echo '    cmd = "sudo poky_groupadd.sh {} {}".format(gid, cname)' >> ${lvt}; \
                echo '    subprocess.check_call(cmd.split(), stdout=sys.stdout, stderr=sys.stderr)' >> ${lvt}; \
                echo >> ${lvt}; \
                echo 'try:' >> ${lvt}; \
                echo "    ##檢查是否存在(uid)" >> ${lvt}; \
                echo '    pwd.getpwuid(uid)' >> ${lvt}; \
                echo 'except KeyError:' >> ${lvt}; \
                echo "    ##不存在時配置" >> ${lvt}; \
                echo '    cmd = "sudo poky_useradd.sh {} {} {}".format(uid, gid, cname)' >> ${lvt}; \
                echo '    subprocess.check_call(cmd.split(), stdout=sys.stdout, stderr=sys.stderr)' >> ${lvt}; \
                echo >> ${lvt}; \
                echo 'cmd = "sudo -E -H -u {wn} poky_launch.sh {wd}".format(wn=cname, wd=args.workdir)' >> ${lvt}; \
                else \
                echo 'cmd = """poky_usersetup.py --username={wn} --workdir={wd} {idargs} poky_launch.sh {wd}""" .format(wn=cname, wd=args.workdir, idargs=idargs)' >> ${lvt}; \
                fi; \
                echo 'cmd = cmd.split()' >> ${lvt}; \
                echo "##追加參數" >> ${lvt}; \
                echo 'if args.cmd:' >> ${lvt}; \
                echo '    cmd.extend(args.cmd)' >> ${lvt}; \
                echo >> ${lvt}; \
                echo 'if os.getenv("IDMSG") == str(1):' >> ${lvt}; \
                echo '    print("cmd     ",cmd)' >> ${lvt}; \
                echo >> ${lvt}; \
                echo 'os.execvp(cmd[0], cmd)' >> ${lvt}; \
            fi; \
            ##//--------------------------------------------
            ##//[帳號建立](命令執行 & 轉換身分)
            ##//(usersetup.py)(=Modify=)(poky_usersetup.py)
            lvn="poky_usersetup.py"; lvp="/usr/bin/"; lvt="${lvp}${lvn}"; \
            if [ -f "${lvt}" ]; then rm -f ${lvt}; fi; \
            if [ "$SETENVDIRECT" != "1" ]; then touch ${lvt}; fi; \
            if [ -f "${lvt}" ]; then \
                echo '#!/usr/bin/env python3' >> ${lvt}; \
                echo '# -*- coding:utf-8 -*-' >> ${lvt}; \
                echo '# coding=utf-8' >> ${lvt}; \
                echo >> ${lvt}; \
                echo 'import argparse' >> ${lvt}; \
                echo 'import grp' >> ${lvt}; \
                echo 'import os' >> ${lvt}; \
                echo 'import pwd' >> ${lvt}; \
                echo 'import subprocess' >> ${lvt}; \
                echo 'import sys' >> ${lvt}; \
                echo >> ${lvt}; \
                echo "def sanity_check_workdir(workdir):" >> ${lvt}; \
                echo "    st = os.stat(workdir)" >> ${lvt}; \
                echo "    if st.st_uid == 0 or st.st_gid == 0:" >> ${lvt}; \
                echo "        print('The uid:gid for \"{}\" is \"{}:{}\".'" >> ${lvt}; \
                echo "              'The uid and gid must be non-zero.'" >> ${lvt}; \
                echo "              'Please check to make sure the \"volume\" or \"bind\"'" >> ${lvt}; \
                echo "              'specified using either \"-v\" or \"--mount\" to docker,'" >> ${lvt}; \
                echo "              'exists and has a non-zero uid:gid.'.format(workdir, st.st_uid, st.st_gid))" >> ${lvt}; \
                echo "        return False" >> ${lvt}; \
                echo "    return True" >> ${lvt}; \
                echo >> ${lvt}; \
                echo "parser = argparse.ArgumentParser()" >> ${lvt}; \
                echo "parser.add_argument(\"--uid\"," >> ${lvt}; \
                echo "                    type=int," >> ${lvt}; \
                echo "                    help=\"uid to use for the user.\"" >> ${lvt}; \
                echo "                         \"If not specified, the uid of the owner of WORKDIR is used\")" >> ${lvt}; \
                echo >> ${lvt}; \
                echo "parser.add_argument(\"--gid\"," >> ${lvt}; \
                echo "                    type=int," >> ${lvt}; \
                echo "                    help=\"gid to use for the initial login group for the user.\"" >> ${lvt}; \
                echo "                         \"If not specified, the gid of WORKDIR is used\")" >> ${lvt}; \
                echo >> ${lvt}; \
                echo "parser.add_argument(\"--skel\"," >> ${lvt}; \
                echo "                    default=\"\"," >> ${lvt}; \
                echo "                    help=\"Directory to use as the skeleton for user's home\")" >> ${lvt}; \
                echo >> ${lvt}; \
                echo "parser.add_argument(\"--username\"," >> ${lvt}; \
                echo "                    default='sw'," >> ${lvt}; \
                echo "                    help=\"username of the user to be modified\")" >> ${lvt}; \
                echo >> ${lvt}; \
                echo "parser.add_argument(\"--workdir\"," >> ${lvt}; \
                echo "                    default=\"/home/sw\"," >> ${lvt}; \
                echo "                    help=\"directory to base the uid on\")" >> ${lvt}; \
                echo >> ${lvt}; \
                echo "parser.add_argument(\"cmd\"," >> ${lvt}; \
                echo "                    help=\"command to exec after setting up the user\")" >> ${lvt}; \
                echo >> ${lvt}; \
                echo "parser.add_argument(\"args\"," >> ${lvt}; \
                echo "                    default=\"\"," >> ${lvt}; \
                echo "                    nargs=argparse.REMAINDER)" >> ${lvt}; \
                echo >> ${lvt}; \
                echo 'args = parser.parse_args()' >> ${lvt}; \
                echo >> ${lvt}; \
                echo 'if not args.uid:' >> ${lvt}; \
                echo '    st = os.stat(args.workdir)' >> ${lvt}; \
                echo '    args.uid = st.st_uid' >> ${lvt}; \
                echo '    if not sanity_check_workdir(args.workdir):' >> ${lvt}; \
                echo '        sys.exit(1)' >> ${lvt}; \
                echo >> ${lvt}; \
                echo 'if not args.gid:' >> ${lvt}; \
                echo '    st = os.stat(args.workdir)' >> ${lvt}; \
                echo '    args.gid = st.st_gid' >> ${lvt}; \
                echo '    if not sanity_check_workdir(args.workdir):' >> ${lvt}; \
                echo '        sys.exit(1)' >> ${lvt}; \
                echo >> ${lvt}; \
                echo 'try:' >> ${lvt}; \
                echo "    ##檢查是否存在(gid)" >> ${lvt}; \
                echo '    grp.getgrgid(args.gid)' >> ${lvt}; \
                echo 'except KeyError:' >> ${lvt}; \
                echo "    ##不存在時配置" >> ${lvt}; \
                echo '    cmd = "sudo poky_groupadd.sh {} {}".format(args.gid, args.username)' >> ${lvt}; \
                echo '    subprocess.check_call(cmd.split(), stdout=sys.stdout, stderr=sys.stderr)' >> ${lvt}; \
                echo >> ${lvt}; \
                echo 'try:' >> ${lvt}; \
                echo "    ##檢查是否存在(uid)" >> ${lvt}; \
                echo '    pwd.getpwuid(args.uid)' >> ${lvt}; \
                echo 'except KeyError:' >> ${lvt}; \
                echo "    ##不存在時配置" >> ${lvt}; \
                echo '    cmd = "sudo poky_useradd.sh {} {} {} {}".format(args.uid, args.gid, args.username, args.skel)' >> ${lvt}; \
                echo '    subprocess.check_call(cmd.split(), stdout=sys.stdout, stderr=sys.stderr)' >> ${lvt}; \
                echo >> ${lvt}; \
                echo 'usercmd = [ args.cmd ] + args.args' >> ${lvt}; \
                echo 'cmd = "sudo -E -H -u {} ".format(args.username)' >> ${lvt}; \
                echo 'cmd = cmd.split() + usercmd' >> ${lvt}; \
                echo >> ${lvt}; \
                echo 'os.execvp(cmd[0], cmd)' >> ${lvt}; \
            fi; \
            ##//[帳號建立](群組配對)
            ##//(restrict_groupadd.sh)(=Modify=)(poky_groupadd.sh)
            lvn="poky_groupadd.sh"; lvp="/usr/bin/"; lvt="${lvp}${lvn}"; \
            if [ -f "${lvt}" ]; then rm -f ${lvt}; fi; \
            touch ${lvt}; if [ -f "${lvt}" ]; then \
                echo '#!/bin/bash' >> ${lvt}; \
                echo >> ${lvt}; \
                echo 'gid=$(($1))' >> ${lvt}; \
                echo 'groupname=$2' >> ${lvt}; \
                echo >> ${lvt}; \
                echo 'if [ $gid -eq 0 ]; then' >> ${lvt}; \
                echo '    echo "Refusing to use a gid of 0"' >> ${lvt}; \
                echo '    exit 1' >> ${lvt}; \
                echo 'else' >> ${lvt}; \
                echo '    groupadd -o -g $gid "$groupname"' >> ${lvt}; \
                echo 'fi' >> ${lvt}; \
            fi; \
            ##//[帳號建立](個人配對)
            ##//(restrict_useradd.sh)(=Modify=!!)(poky_useradd.sh)
            lvn="poky_useradd.sh"; lvp="/usr/bin/"; lvt="${lvp}${lvn}"; \
            if [ -f "${lvt}" ]; then rm -f ${lvt}; fi; \
            touch ${lvt}; if [ -f "${lvt}" ]; then \
                echo '#!/bin/bash' >> ${lvt}; \
                echo >> ${lvt}; \
                echo 'uid=$(($1))' >> ${lvt}; \
                echo 'gid=$(($2))' >> ${lvt}; \
                echo 'username=$3' >> ${lvt}; \
                echo 'if [ "$4" != "" ]; then skelarg="-k $4"; fi' >> ${lvt}; \
                echo >> ${lvt}; \
                echo 'if [ $uid -eq 0 ]; then' >> ${lvt}; \
                echo '    echo "Refusing to use a uid of 0 (root)"' >> ${lvt}; \
                echo '    exit 1' >> ${lvt}; \
                echo 'elif [ $gid -eq 0 ]; then' >> ${lvt}; \
                echo '    echo "Refusing to use a gid of 0 (root)"' >> ${lvt}; \
                echo '    exit 1' >> ${lvt}; \
                echo 'else' >> ${lvt}; \
                echo '    ##建立帳號 IDSET <=> username' >> ${lvt}; \
                echo '    if [ -d "/home/$username" ]; then' >> ${lvt}; \
                echo '        useradd -M $skelarg -N -g $gid -o -u $uid "$username"' >> ${lvt}; \
                echo '    else' >> ${lvt}; \
                echo '        useradd -m $skelarg -N -g $gid -o -u $uid "$username"' >> ${lvt}; \
                echo '    fi' >> ${lvt}; \
                echo '    ##添加權限 sudo' >> ${lvt}; \
                echo '    usermod -aG sudo "$username"' >> ${lvt}; \
                echo '    ##//sed -i "s/sudo:x:27:/sudo:x:27:$username/g" /etc/group' >> ${lvt}; \
                echo 'fi' >> ${lvt}; \
            fi; \
            ##//==[crops/poky](dockerfile)[e](引用上述文件)
        else \
            ##//替換登入名稱
            lvn="poky-entry.py"; lvp="/usr/bin/"; lvt="${lvp}${lvn}"; \
            if [ -f "{lvt}" ]; then sed -i "s/pokyuser/$IDSET/g" {lvt}; fi; \
            ##//動態帳號設定(目錄權限對應)
            lvn="poky-entry.py"; lvp="/usr/bin/"; lvt="${lvp}${lvn}"; \
            if [ -f "${lvt}" ]; then \
                ##修補 => 對應預設
                sed -i "/if os.getcwd()/i\cname = os.getenv(\"IDSET\")" {lvt}; \
                sed -i "/if os.getcwd()/i\cpath = \'/home/\' + cname" {lvt}; \
                sed -i "/if os.getcwd()/i\args.workdir = os.getcwd()" {lvt}; \
                ##sed -i "/if os.getcwd()/i\args.workdir = \"/home/\" + cname" {lvt}; \
                sed -i '/if os.getcwd()/{x;p;x;}' {lvt}; \
                sed -i "/if os.getcwd()/,+4d" {lvt}; \
                sed -i "/elif args.workdir/,+4d" {lvt}; \
                ##修補 => 對應個人
                ##優先權(1) [-w] 排除預設&處理例外
                sed -i "/usersetup.py --username/i\elif args.workdir != \'/home\' and os.path.exists(args.workdir):" {lvt}; \
                sed -i "/usersetup.py --username/i\    idargs = \"--uid={} --gid={}\".format(os.stat(os.getcwd()).st_uid, os.stat(os.getcwd()).st_gid)" {lvt}; \
                sed -i "/usersetup.py --username/i\    if os.stat(os.getcwd()).st_uid == 0 or os.stat(os.getcwd()).st_gid == 0:" {lvt}; \
                sed -i "/usersetup.py --username/i\        if cname != \"root\":" {lvt}; \
                sed -i "/usersetup.py --username/i\            idargs = \"--uid=$IDNUM --gid=$IDNUM\"" {lvt}; \
                sed -i '/usersetup.py --username/{x;p;x;}' {lvt}; \
                ##優先權(2) [-e] 處理例外
                sed -i "/usersetup.py --username/i\elif os.path.exists(cpath):" {lvt}; \
                sed -i "/usersetup.py --username/i\    idargs = \"--uid={} --gid={}\".format(os.stat(cpath).st_uid, os.stat(cpath).st_gid)" {lvt}; \
                sed -i '/usersetup.py --username/{x;p;x;}' {lvt}; \
                ##優先權(3) 預設
                sed -i "/usersetup.py --username/i\else:" {lvt}; \
                sed -i "/usersetup.py --username/i\    idargs = \"--uid=$IDNUM --gid=$IDNUM\"" {lvt}; \
                sed -i '/usersetup.py --username/{x;p;x;}' {lvt}; \
                ##環境資訊
                MSG_CTL=${MSG_CTL:-NO} && if [ "$MSG_CTL" = "YES" ]; then \
                sed -i "/usersetup.py --username/i\print(\"==========[poky-entry.py]\")" {lvt}; \
                sed -i "/usersetup.py --username/i\print(\"argsid  \",args.id)" {lvt}; \
                sed -i "/usersetup.py --username/i\print(\"workdir \",args.workdir)" {lvt}; \
                sed -i "/usersetup.py --username/i\print(\"getcwd  \",os.getcwd())" {lvt}; \
                sed -i "/usersetup.py --username/i\print(\"st_uid  \",os.stat(os.getcwd()).st_uid)" {lvt}; \
                sed -i "/usersetup.py --username/i\print(\"st_gid  \",os.stat(os.getcwd()).st_gid)" {lvt}; \
                sed -i "/usersetup.py --username/i\print(\"cname   \",cname)" {lvt}; \
                sed -i "/usersetup.py --username/i\print(\"cpath   \",cpath)" {lvt}; \
                sed -i "/usersetup.py --username/i\print(\"idargs  \",idargs)" {lvt}; \
                sed -i "/usersetup.py --username/i\print()" {lvt}; \
                sed -i '/usersetup.py --username/{x;p;x;}' {lvt}; \
                fi; \
                sed -i "s/usersetup.py --username=$IDSET/usersetup.py --username={wn}/g" {lvt}; \
                sed -i 's/.format(wd=args.workdir/.format(wn=cname, wd=args.workdir/g' {lvt}; \
            fi; \
            ##//帳號建立
            lvn="restrict_useradd.sh"; lvp="/usr/bin/"; lvt="${lvp}${lvn}"; \
            if [ -f "${lvt}" ]; then \
                sed -i "/useradd -N -g/i\    echo \"==========[restrict_useradd.sh]\"" ${lvt}; \
                sed -i "/useradd -N -g/i\    echo '\$uid      => '\$uid" ${lvt}; \
                sed -i "/useradd -N -g/i\    echo '\$gid      => '\$gid" ${lvt}; \
                sed -i "/useradd -N -g/i\    echo '\$username => '\$username" ${lvt}; \
                sed -i "/useradd -N -g/i\    echo '\$IDSET    => '\$IDSET" ${lvt}; \
                sed -i "/useradd -N -g/i\    echo '\$skelarg  => '\$skelarg" ${lvt}; \
                sed -i "/useradd -N -g/i\    echo '\pwd       => '\$(pwd)" ${lvt}; \
                sed -i "/useradd -N -g/i\    echo '\whoami    => '\$(whoami)" ${lvt}; \
                sed -i "/useradd -N -g/{x;p;x;}"  ${lvt}; \
                ##建立帳號 IDSET <=> username
                sed -i "/useradd -N -g/i\    if [ -d \"\/home\/\$username\" ]; then" ${lvt}; \
                sed -i "/useradd -N -g/i\        1111111111" ${lvt}; \
                sed -i "/useradd -N -g/i\    else" ${lvt}; \
                sed -i "/useradd -N -g/i\        2222222222" ${lvt}; \
                sed -i "/useradd -N -g/i\    fi" ${lvt}; \
                sed -i "/useradd -N -g/i\    sed -i \"s/sudo:x:27:/sudo:x:27:\$username/g\" /etc/group" ${lvt}; \
                sed -i "/useradd -N -g/i\    if [ -f "/etc/sudoers.usersetup" ]; then rm -f /etc/sudoers.usersetup; fi;" ${lvt}; \
                sed -i "/useradd -N -g/i\    touch /etc/sudoers.usersetup;" ${lvt}; \
                sed -i "/useradd -N -g/i\    echo \"\$username ALL=(ALL:ALL) NOPASSWD:ALL\" >> /etc/sudoers.usersetup" ${lvt}; \
                sed -i "/useradd -N -g/i\    echo \"%\$username ALL=(ALL:ALL) NOPASSWD:ALL\" >> /etc/sudoers.usersetup" ${lvt}; \
                sed -i "/useradd -N -g/{x;p;x;}"  ${lvt}; \
                ##保留預設帳號(帳號群組保留 IDSET <=> sw)
                USR_CTL=${USR_CTL:-NO} && if [ "$USR_CTL" = "YES" ]; then \
                sed -i "/useradd -N -g/i\    if [ \"\$username\" != \"$IDSET\" ]; then" ${lvt}; \
                sed -i "/useradd -N -g/i\        3333333333" ${lvt}; \
                ##sed -i "/useradd -N -g/i\        echo \"\$IDSET:x:\$IDNUM\" >> /etc/group" ${lvt}; \
                sed -i "/useradd -N -g/i\        sed -i \"s/sudo:x:27:\$username/sudo:x:27:\$username,\$IDSET/g\" /etc/group" ${lvt}; \
                sed -i "/useradd -N -g/i\        echo \"\$IDSET ALL=(ALL:ALL) NOPASSWD:ALL\" >> /etc/sudoers.usersetup" ${lvt}; \
                ##sed -i "/useradd -N -g/i\        echo \"\%\$IDSET ALL=(ALL:ALL) NOPASSWD:ALL\" >> /etc/sudoers.usersetup" ${lvt}; \
                ##sed -i "/useradd -N -g/i\        sed -i \'\$d\' /etc/sudoers.\$IDSET" ${lvt}; \
                sed -i "/useradd -N -g/{x;p;x;}"  ${lvt}; \
                sed -i "/useradd -N -g/i\    fi" ${lvt}; \
                fi; \
                ##原先建立帳號方法停用
                sed -i "s/useradd -N -g/##useradd -N -g/g" ${lvt}; \
                ##處理原先無法處理替代
                sed -i "s/1111111111/useradd -M \$skelarg -N -g \$gid -o -u \$uid \"\$username\"/g" ${lvt}; \
                sed -i "s/2222222222/useradd -m \$skelarg -N -g \$gid -o -u \$uid \"\$username\"/g" ${lvt}; \
                sed -i "s/3333333333/useradd -m \$skelarg -N -g \$IDNUM               \"\$IDSET\"/g" ${lvt}; \
                ##sed -i "s/3333333333/useradd -m \$skelarg -N -g \$IDNUM -o -u \$IDNUM \"\$IDSET\"/g" ${lvt}; \
            fi; \
            ##//個人環境設定
            lvn="poky-launch.sh"; lvp="/usr/bin/"; lvt="${lvp}${lvn}"; \
            if [ -f "${lvt}" ]; then \
                sed -i "/exec \"\$@\"/i\    echo \"==========\"" ${lvt}; \
                sed -i "/exec \"\$@\"/i\    echo '\$@        => '\$@" ${lvt}; \
                sed -i "/exec \"\$@\"/i\    echo '\$workdir  => '\$workdir" ${lvt}; \
                sed -i "/exec \"\$@\"/i\    echo '\$HOME     => '\$HOME" ${lvt}; \
                sed -i "/exec \"\$@\"/i\    echo '\$USER     => '\$USER" ${lvt}; \
                sed -i "/exec \"\$@\"/i\    echo '\$uid \$gid => '\$(id -u) \$(id -g)" ${lvt}; \
                sed -i "/exec \"\$@\"/i\    echo \"==========\"" ${lvt}; \
                sed -i "/exec \"\$@\"/{x;p;x;}" ${lvt}; \
                ##轉載GIT設定(個人)
                sed -i "/exec \"\$@\"/i\    if [ \"\$workdir\" != \"\$HOME\" ]; then" ${lvt}; \
                sed -i "/exec \"\$@\"/i\        if [ -f \".gitconfig\" ]; then cp .git* ~\" fi;" ${lvt}; \
                sed -i "/exec \"\$@\"/i\    fi" ${lvt}; \
                sed -i "/exec \"\$@\"/{x;p;x;}" ${lvt}; \
                ##對應GIT設定(主機)
                sed -i "/exec \"\$@\"/i\    if [ -f \"/etc/hosts\" ]; then" ${lvt}; \
                #sed -i "/exec \"\$@\"/i\        echo -e \"10.5.254.99\tmce-tfs03  mce-tfs03.taipei.via.com.tw  mce-tfs03.via.com.tw\" | sudo tee /etc/hosts" ${lvt}; \
                #sed -i "/exec \"\$@\"/i\        echo 'echo -e \"10.5.254.99\tmce-tfs03  mce-tfs03.taipei.via.com.tw  mce-tfs03.via.com.tw\" >> /etc/hosts' | sudo sh" ${lvt}; \
                ##sed -i "/exec \"\$@\"/i\        sudo sh -c 'echo -e \"10.5.254.99\tmce-tfs03  mce-tfs03.taipei.via.com.tw  mce-tfs03.via.com.tw\" >> /etc/hosts'" ${lvt}; \
                sed -i "/exec \"\$@\"/i\        sudo sh -c \"echo 10.5.254.99  mce-tfs03  mce-tfs03.taipei.via.com.tw  mce-tfs03.via.com.tw >> /etc/hosts\"" ${lvt}; \
                sed -i "/exec \"\$@\"/i\    fi" ${lvt}; \
                sed -i "/exec \"\$@\"/{x;p;x;}" ${lvt}; \
                ##提示去除
                sed -i "/exec \"\$@\"/i\    touch ~/.sudo_as_admin_successful" ${lvt}; \
                sed -i "/exec \"\$@\"/{x;p;x;}" ${lvt}; \
                ##移除無用目錄
                sed -i "/exec \"\$@\"/i\    if [ -d \"\/home\/yoctouser\" ]; then sudo rm -rf /home/yoctouser; fi;" ${lvt}; \
                sed -i "/exec \"\$@\"/i\    if [ -d \"\/home\/usersetup\" ]; then sudo rm -rf /home/usersetup; fi;" ${lvt}; \
                sed -i "/exec \"\$@\"/{x;p;x;}"  ${lvt}; \
            fi; \
        fi; \
    fi; \
    ##//------------------------------------------------------------------------
    ##//環境設定(量身訂做)
    ENV_CTL=${ENV_CTL:-YES} && if [ "$ENV_CTL" = "YES" ]; then \
        ##//環境設定(sudo)
        if [ -f "/etc/sudoers" ]; then \
            ##//無須密碼
            ##//sed -i 's/ALL=(ALL:ALL) ALL/ALL=(ALL:ALL) NOPASSWD:ALL/g' /etc/sudoers; \
            sed -i 's/root\tALL=(ALL:ALL) ALL/root\tALL=(ALL:ALL) NOPASSWD:ALL/g' /etc/sudoers; \
            sed -i 's/\%sudo\tALL=(ALL:ALL) ALL/\%sudo\tALL=(ALL:ALL) NOPASSWD:ALL/g' /etc/sudoers; \
            ##//內嵌引用(預設帳號)
            ##//echo >> /etc/sudoers; \
            ##//echo "$IDSET ALL=(ALL:ALL) NOPASSWD:ALL" >> /etc/sudoers; \
            ##//echo "%$IDSET ALL=(ALL:ALL) NOPASSWD:ALL" >> /etc/sudoers; \
            ##//[NR]echo "$username ALL=(ALL:ALL) NOPASSWD:ALL" | sudo tee -a /etc/sudoers
            ##//[NR]sudo sh -c "echo $username ALL=(ALL:ALL) NOPASSWD:ALL" >> /etc/sudoers
            ##//附加引用(sudoers.usersetup)
            ##//if [ -f "/etc/sudoers.usersetup" ]; then echo "#include /etc/sudoers.usersetup" >> /etc/sudoers; fi; \
        fi; \
        ##//環境設定(shell)
        echo 'dash dash/sh boolean false' | debconf-set-selections; \
        dpkg-reconfigure -f noninteractive dash; \
        ##//環境設定(區域)(語系)
        ##//新增系統語系(資料庫)
        apt-get install -y locales language-pack-zh-hant language-pack-zh-hant-base; \
        ##
        ##//新增系統語系
        #//sed -i 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen; \
        #//sed -i 's/# zh_TW.UTF-8 UTF-8/zh_TW.UTF-8 UTF-8/' /etc/locale.gen; \
        #//#sed -i '/^#.* zh_TW.* /s/^#//' /etc/locale.gen; \
        #//#sed -i "s/^# $LANG.*/$LANG.UTF-8 UTF-8/" /etc/locale.gen; \
        #//#localedef -c -i en_US -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8; \
        #//#localedef -c -i zh_TW -f UTF-8 -A /usr/share/locale/locale.alias zh_TW.UTF-8; \
        ##
        /usr/sbin/locale-gen zh_TW.UTF-8 en_US.UTF-8; \
        ##
        ##//設定系統語系!!功能相同!!
        ##//--------------
        dpkg-reconfigure -f noninteractive locales; \
        ##//--------------
        update-locale LANGUAGE="en_US" LANG="en_US.UTF-8" LC_ALL="en_US.UTF-8"; \
        #//update-locale LANGUAGE="zh_TW" LANG="zh_TW.UTF-8" LC_ALL="zh_TW.UTF-8"; \
        #//update-locale LANGUAGE="zh_TW:zh:en_US:en" LANG="zh_TW.UTF-8" LC_ALL="zh_TW.UTF-8"; \
        ##//--------------
        #//#echo 'LANGUAGE=zh_TW:zh:en_US:en' > /etc/default/locale; \
        #//#echo 'LANG=zh_TW.UTF-8:en_US.UTF-8' > /etc/default/locale; \
        #//#echo 'LC_ALL=zh_TW.UTF-8:en_US.UTF-8' > /etc/default/locale; \
        #//#echo 'LC_CTYPE=zh_TW.UTF-8' > /etc/default/locale; \
        #//#echo 'LC_MESSAGES=zh_TW.UTF-8' > /etc/default/locale; \
        ##//--------------
        ##
        ##locale-gen; \
        ##update-locale; \
        ##locale && locale -a; \
        ##//環境設定(區域)(時區)
        if [ "$IDTZD" != "Etc/UTC" ]; then \
            ln -snf "/usr/share/zoneinfo/$IDTZD" /etc/localtime; \
            echo $IDTZD > /etc/timezone; \
            dpkg-reconfigure -f noninteractive tzdata; \
        fi; \
        ##//環境設定(輔助)(特定)
        LOC_CTL=${LOC_CTL:-NO} && if [ "$LOC_CTL" = "YES" ]; then \
            ##//環境設定(輔助)(特定)(通用)(權限=>ROOT)
            lvn="dockerdumb.sh"; lvp="/usr/bin/"; lvt="${lvp}${lvn}"; \
            if [ -f "${lvt}" ]; then rm -f ${lvt}; fi; \
            touch ${lvt}; if [ -f "${lvt}" ]; then \
                echo '##環境設定(輔助)(特定)(通用)' >> ${lvt}; \
                echo >> ${lvt}; \
                echo '##時區對應(客製化)' >> ${lvt}; \
                echo "if [ \"\$IDTZD\" != \"\" ] && [ \"\$IDTZD\" != \"$IDTZD\" ]; then" >> ${lvt}; \
                echo "    ln -snf /usr/share/zoneinfo/\"\$IDTZD\" /etc/localtime" >> ${lvt}; \
                echo "    sh -c 'echo \"\$IDTZD\" > /etc/timezone'" >> ${lvt}; \
                echo "    sh -c 'dpkg-reconfigure -f noninteractive tzdata'" >> ${lvt}; \
                echo "fi" >> ${lvt}; \
                echo >> ${lvt}; \
                echo '##轉址對應(客製化)' >> ${lvt}; \
                echo 'if [ -f "/etc/hosts" ]; then' >> ${lvt}; \
                echo '    ##//echo -e "10.5.254.99\tmce-tfs03  mce-tfs03.taipei.via.com.tw  mce-tfs03.via.com.tw" | sudo tee /etc/hosts' >> ${lvt}; \
                echo '    ##//echo '"'"'echo -e "10.5.254.99\tmce-tfs03  mce-tfs03.taipei.via.com.tw  mce-tfs03.via.com.tw" >> /etc/hosts'"'"' | sudo sh' >> ${lvt}; \
                echo '    ##//sudo sh -c '"'"'echo "10.5.254.99\tmce-tfs03  mce-tfs03.taipei.via.com.tw  mce-tfs03.via.com.tw" >> /etc/hosts'"'"'' >> ${lvt}; \
                echo '    sudo sh -c "echo 10.5.254.99  mce-tfs03  mce-tfs03.taipei.via.com.tw  mce-tfs03.via.com.tw >> /etc/hosts"' >> ${lvt}; \
                echo 'fi' >> ${lvt}; \
                echo >> ${lvt}; \
            fi; \
            ##//環境設定(輔助)(特定)(專用)(權限=>USER)
            lvn="dockerpoky.sh"; lvp="/usr/bin/"; lvt="${lvp}${lvn}"; \
            if [ -f "${lvt}" ]; then rm -f ${lvt}; fi; \
            touch ${lvt}; if [ -f "${lvt}" ]; then \
                ##//echo '##專用配置' >> ${lvt}; \
                ##//echo 'if [ -f ~/env.sh ]; then . ~/env.sh;' >> ${lvt}; \
                ##//echo 'elif [ -f ~/_shell_/env.sh ]; then . ~/_shell_/env.sh; fi;' >> ${lvt}; \
                ##//echo >> ${lvt}; \
                echo '##移除提示' >> ${lvt}; \
                echo 'touch ~/.sudo_as_admin_successful' >> ${lvt}; \
            fi; \
            ##//變更(ssh)
            if [ -f "/etc/ssh/sshd_config" ]; then \
                sed -i 's/X11Forwarding yes/#X11Forwarding yes/g' /etc/ssh/sshd_config; \
                ##//避免斷線 Xshell
                sed -i 's/^#ClientAliveInterval 0/ClientAliveInterval 60/g' /etc/ssh/sshd_config; \
                sed -i 's/^#ClientAliveCountMax 0/ClientAliveCountMax 10/g' /etc/ssh/sshd_config; \
                sed -i 's/^#UseDNS/UseDNS/g' /etc/ssh/sshd_config; \
                ##echo "ClientAliveInterval 60" >> /etc/ssh/sshd_config; \
                ##echo "ClientAliveCountMax 10" >> /etc/ssh/sshd_config; \
                ##echo "UseDNS no" >> /etc/ssh/sshd_config; \
                chmod 400 /etc/ssh/*; \
                ##chmod 644 /etc/ssh/*.pub; \
                ##chown 600 /etc/ssh/sshd_config; \
                ##//service ssh restart
                ##//service ssh status
                ##//tail -f /var/log/syslog
            fi; \
            ##//變更(python)(切換版本)
            lvn="pyswitch.sh"; lvp="/usr/bin/"; lvt="${lvp}${lvn}"; \
            if [ -f "${lvt}" ]; then rm -f ${lvt}; fi; \
            touch ${lvt}; if [ -f "${lvt}" ]; then \
                echo 1 > ${lvt}; \
                sed -i '$a #!/bin/sh'                                                ${lvt}; \
                sed -i '$a #//#!/bin/bash'                                           ${lvt}; \
                sed -i '$G'                                                          ${lvt}; \
                sed -i '$a python_v3()'                                              ${lvt}; \
                sed -i '$a {'                                                        ${lvt}; \
                sed -i '$a \    sudo ln -sf python3 python'                          ${lvt}; \
                sed -i '$a \    echo "now => python 3"'                              ${lvt}; \
                sed -i '$a }'                                                        ${lvt}; \
                sed -i '$a python_v2()'                                              ${lvt}; \
                sed -i '$a {'                                                        ${lvt}; \
                sed -i '$a \    sudo ln -sf python2 python'                          ${lvt}; \
                sed -i '$a \    echo "now => python 2"'                              ${lvt}; \
                sed -i '$a }'                                                        ${lvt}; \
                sed -i '$a #//-----------------------------------------------'       ${lvt}; \
                sed -i '$a syntax_check()'                                           ${lvt}; \
                sed -i '$a {'                                                        ${lvt}; \
                sed -i '$a \    if [ -n "$1" ]; then'                                ${lvt}; \
                sed -i '$a \        case "${1}" in'                                  ${lvt}; \
                sed -i '$a \            2)'                                          ${lvt}; \
                sed -i '$a \                cd /usr/bin; python_v2'                  ${lvt}; \
                sed -i '$a \                ;;'                                      ${lvt}; \
                sed -i '$a \            3)'                                          ${lvt}; \
                sed -i '$a \                cd /usr/bin; python_v3'                  ${lvt}; \
                sed -i '$a \                ;;'                                      ${lvt}; \
                sed -i '$a \            *)'                                          ${lvt}; \
                sed -i '$a \                echo "$0 3  ==> for python 3"'           ${lvt}; \
                sed -i '$a \                echo "$0 2  ==> for python 2"'           ${lvt}; \
                sed -i '$a \                echo "$0    ==> for python 2 (default)"' ${lvt}; \
                sed -i '$a \                ;;'                                      ${lvt}; \
                sed -i '$a \        esac'                                            ${lvt}; \
                sed -i '$a \    else'                                                ${lvt}; \
                sed -i '$a \        cd /usr/bin; python_v2'                          ${lvt}; \
                sed -i '$a \    fi'                                                  ${lvt}; \
                sed -i '$a }'                                                        ${lvt}; \
                sed -i '$a syntax_check "$@"'                                        ${lvt}; \
                sed -i '1d'                                                          ${lvt}; \
                #sed -i '$G'                                                         ${lvt}; \
                #sed -i '^G'                                                         ${lvt}; \
            fi; \
        fi; \
        ##//收尾
        lvn="dockertask.sh"; lvp="/usr/bin/"; lvt="${lvp}${lvn}"; \
        if [ -f "${lvt}" ]; then rm -f ${lvt}; fi; \
        touch ${lvt}; if [ -f "${lvt}" ]; then \
            echo 1 > ${lvt}; \
            sed -i '$a #!/bin/bash'                              ${lvt}; \
            sed -i '$G'                                          ${lvt}; \
            sed -i '$a #taskshell()'                             ${lvt}; \
            sed -i '$a #{'                                       ${lvt}; \
            sed -i '$a \    chmod 755 /usr/bin/*.sh 2>/dev/null' ${lvt}; \
            sed -i '$a \    chmod 755 /usr/bin/*.py 2>/dev/null' ${lvt}; \
            sed -i '$a #}'                                       ${lvt}; \
            sed -i '$G'                                          ${lvt}; \
            sed -i '$a #taskshell'                               ${lvt}; \
            sed -i '1d'                                          ${lvt}; \
            /bin/bash ${lvt}; sh -c "rm -f ${lvt}"; \
        fi; \
    fi; \
    ##//------------------------------------------
    ##target="dockersetup_brain.sh"; \
    ##wget -O /usr/bin/${target} --no-check-certificate https://raw.githubusercontent.com/lijenchen/Docker/main/${target}; \
    ##if [ -f /usr/bin/${target} ]; then bash /usr/bin/${target}; fi; \
    ##//------------------------------------------
    ##//清空
    rm -rf /etc/apt/sources.list.d/*.list; rm -rf /var/lib/apt/lists/*; \
    apt-get clean;

WORKDIR /home
#WORKDIR /home/$IDSET
#USER $IDSET

##//在 "dumb-init" 後面加入 -- 參數，分隔 dumb-init 與 主程式，因為 dumb-init 也有自己的參數選項可以設定。
##//使用 dumb-init 初始化系統 => 控制所有啟動的程序，控制訊號覆寫
##//
##//ENTRYPOINT ["executable", "param1", "param2"]
##//
##//[=>]ENTRYPOINT ["/usr/bin/distro-entry.sh", "/usr/bin/dumb-init", "--", "/usr/bin/poky-entry.py"]
ENTRYPOINT ["/usr/bin/dumb-entry.sh", "/usr/bin/dumb-init", "--", "/usr/bin/poky-entry.py"]
#ENTRYPOINT ["/usr/bin/dumb-init", "--", "/usr/bin/poky-entry.py"]
#ENTRYPOINT ["/usr/bin/dumb-start.sh"]
CMD ["/bin/bash"]